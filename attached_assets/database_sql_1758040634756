-- Base de datos CORREGIDA para El Rey de los Buñuelos
-- Ejecutar en phpMyAdmin o MySQL

-- Crear la base de datos (sin caracteres especiales)
CREATE DATABASE IF NOT EXISTS bunuelos_system CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

USE bunuelos_system;

-- Tabla de usuarios administradores
CREATE TABLE admin_users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL, -- Se almacenará hasheado
    email VARCHAR(100),
    full_name VARCHAR(100),
    role ENUM('admin', 'supervisor') DEFAULT 'admin',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP NULL,
    login_attempts INT DEFAULT 0,
    locked_until TIMESTAMP NULL
);

-- Tabla de configuración de filas de turnos
CREATE TABLE queue_types (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    display_name VARCHAR(100) NOT NULL,
    description TEXT,
    current_counter INT DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de productos del menú
CREATE TABLE menu_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    queue_type_id INT,
    category VARCHAR(50),
    is_available BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (queue_type_id) REFERENCES queue_types(id) ON DELETE SET NULL
);

-- Tabla de pedidos principales
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_code VARCHAR(20) UNIQUE NOT NULL,
    customer_name VARCHAR(100) NOT NULL,
    turn_number VARCHAR(20) NOT NULL,
    queue_type VARCHAR(20) NOT NULL,
    status ENUM('pending', 'preparing', 'ready', 'delivered', 'cancelled') DEFAULT 'pending',
    total_amount DECIMAL(10,2) NOT NULL,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    delivered_at TIMESTAMP NULL,
    notes TEXT,
    INDEX idx_status (status),
    INDEX idx_order_date (order_date),
    INDEX idx_queue_type (queue_type)
);

-- Tabla de items del pedido
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    menu_item_id INT NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
    FOREIGN KEY (menu_item_id) REFERENCES menu_items(id) ON DELETE RESTRICT
);

-- Tabla de logs del sistema
CREATE TABLE system_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NULL,
    action VARCHAR(100) NOT NULL,
    description TEXT,
    ip_address VARCHAR(45),
    user_agent TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES admin_users(id) ON DELETE SET NULL
);

-- Tabla de configuración del sistema
CREATE TABLE system_config (
    id INT AUTO_INCREMENT PRIMARY KEY,
    config_key VARCHAR(100) UNIQUE NOT NULL,
    config_value TEXT,
    description TEXT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Insertar usuario administrador por defecto (contraseña hasheada correctamente)
INSERT INTO admin_users (username, password, email, full_name) VALUES
('admin', '$2y$10$0yk7sDRTuCfp5hHHkEOlR.7dFR5.kKQTTNf5JOQqUPF9rKAkQVfYK', 'admin@bunuelos.com', 'Administrador Principal');
-- Contraseña real: bunuelos2024

-- Insertar tipos de filas
INSERT INTO queue_types (name, display_name, description) VALUES
('tradicional', 'Fila Tradicional', 'Buñuelos clásicos, con azúcar y mozarella'),
('especiales', 'Fila Especiales', 'Buñuelos hawaianos, rancheros, mermelada, bocadillo, arequipe');

-- Insertar productos del menú
INSERT INTO menu_items (name, description, price, queue_type_id, category) VALUES
('Buñuelo Clásico', 'Buñuelo tradicional con miel', 1500.00, 1, 'tradicional'),
('Buñuelo con Azúcar', 'Buñuelo espolvoreado con azúcar', 2000.00, 1, 'tradicional'),
('Buñuelo de Queso Mozarella', 'Buñuelo relleno de queso mozarella', 2500.00, 1, 'tradicional'),
('Buñuelo Hawaiano', 'Buñuelo relleno de piña y queso', 3000.00, 2, 'especiales'),
('Buñuelo Ranchero', 'Buñuelo relleno de salchicha y queso', 3000.00, 2, 'especiales'),
('Buñuelo de Mermelada', 'Buñuelo relleno de mermelada', 2000.00, 2, 'especiales'),
('Buñuelo de Bocadillo', 'Buñuelo relleno de bocadillo', 2000.00, 2, 'especiales'),
('Buñuelo de Arequipe', 'Buñuelo relleno de arequipe', 2000.00, 2, 'especiales');

-- Insertar configuración inicial
INSERT INTO system_config (config_key, config_value, description) VALUES
('business_name', 'El Rey de los Buñuelos', 'Nombre del negocio'),
('auto_refresh_interval', '30', 'Intervalo de auto-actualización en segundos'),
('max_daily_orders', '500', 'Número máximo de pedidos por día'),
('enable_notifications', 'true', 'Habilitar notificaciones de audio'),
('whatsapp_number', '573150159193', 'Número de WhatsApp para pedidos');

-- Crear índices adicionales para optimización
CREATE INDEX idx_orders_status_date ON orders(status, order_date);
CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_system_logs_date ON system_logs(created_at);
CREATE INDEX idx_admin_users_username ON admin_users(username);
CREATE INDEX idx_queue_types_name ON queue_types(name);

-- Crear vistas útiles
CREATE VIEW daily_sales AS
SELECT 
    DATE(order_date) as sale_date,
    COUNT(*) as total_orders,
    COALESCE(SUM(total_amount), 0) as total_revenue,
    COALESCE(AVG(total_amount), 0) as avg_order_value,
    COUNT(CASE WHEN status = 'delivered' THEN 1 END) as delivered_orders,
    COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled_orders
FROM orders 
WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
GROUP BY DATE(order_date)
ORDER BY sale_date DESC;

CREATE VIEW queue_status AS
SELECT 
    q.name,
    q.display_name,
    q.current_counter,
    COALESCE(COUNT(CASE WHEN o.status IN ('pending', 'preparing', 'ready') THEN 1 END), 0) as active_orders,
    COALESCE(COUNT(CASE WHEN o.status = 'pending' THEN 1 END), 0) as pending_orders,
    COALESCE(COUNT(CASE WHEN o.status = 'preparing' THEN 1 END), 0) as preparing_orders,
    COALESCE(COUNT(CASE WHEN o.status = 'ready' THEN 1 END), 0) as ready_orders
FROM queue_types q
LEFT JOIN orders o ON q.name = o.queue_type AND DATE(o.order_date) = CURDATE()
WHERE q.is_active = TRUE
GROUP BY q.id, q.name, q.display_name, q.current_counter;

-- Procedimientos almacenados
DELIMITER //

-- Procedimiento para crear un nuevo pedido
CREATE PROCEDURE CreateOrder(
    IN p_order_code VARCHAR(20),
    IN p_customer_name VARCHAR(100),
    IN p_turn_number VARCHAR(20),
    IN p_queue_type VARCHAR(20),
    IN p_total_amount DECIMAL(10,2)
)
BEGIN
    DECLARE order_id INT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Insertar pedido principal
    INSERT INTO orders (order_code, customer_name, turn_number, queue_type, total_amount)
    VALUES (p_order_code, p_customer_name, p_turn_number, p_queue_type, p_total_amount);
    
    SET order_id = LAST_INSERT_ID();
    
    COMMIT;
    
    SELECT order_id as new_order_id;
END//

-- Procedimiento para actualizar estado del pedido
CREATE PROCEDURE UpdateOrderStatus(
    IN p_order_id INT,
    IN p_new_status VARCHAR(20),
    IN p_user_id INT
)
BEGIN
    DECLARE old_status VARCHAR(20);
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;
    
    START TRANSACTION;
    
    -- Obtener estado actual
    SELECT status INTO old_status FROM orders WHERE id = p_order_id;
    
    IF old_status IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Order not found';
    END IF;
    
    -- Actualizar estado
    UPDATE orders 
    SET status = p_new_status, 
        updated_at = CURRENT_TIMESTAMP,
        delivered_at = CASE WHEN p_new_status = 'delivered' THEN CURRENT_TIMESTAMP ELSE delivered_at END
    WHERE id = p_order_id;
    
    -- Registrar en logs
    INSERT INTO system_logs (user_id, action, description)
    VALUES (p_user_id, 'order_status_update', 
            CONCAT('Order ', p_order_id, ' status changed from ', COALESCE(old_status, 'NULL'), ' to ', p_new_status));
    
    COMMIT;
END//

-- Procedimiento para obtener estadísticas diarias
CREATE PROCEDURE GetDailyStats(IN p_date DATE)
BEGIN
    SELECT 
        COALESCE(COUNT(*), 0) as total_orders,
        COALESCE(COUNT(CASE WHEN status = 'pending' THEN 1 END), 0) as pending_orders,
        COALESCE(COUNT(CASE WHEN status = 'preparing' THEN 1 END), 0) as preparing_orders,
        COALESCE(COUNT(CASE WHEN status = 'ready' THEN 1 END), 0) as ready_orders,
        COALESCE(COUNT(CASE WHEN status = 'delivered' THEN 1 END), 0) as delivered_orders,
        COALESCE(COUNT(CASE WHEN status = 'cancelled' THEN 1 END), 0) as cancelled_orders,
        COALESCE(SUM(total_amount), 0) as total_revenue,
        COALESCE(AVG(total_amount), 0) as avg_order_value
    FROM orders 
    WHERE DATE(order_date) = p_date;
END//

-- Función para generar código de pedido único
CREATE FUNCTION GenerateOrderCode() RETURNS VARCHAR(20)
READS SQL DATA
DETERMINISTIC
BEGIN
    DECLARE new_code VARCHAR(20);
    DECLARE code_exists INT DEFAULT 1;
    DECLARE attempts INT DEFAULT 0;
    
    WHILE code_exists > 0 AND attempts < 100 DO
        SET attempts = attempts + 1;
        SET new_code = CONCAT('REY', LPAD(FLOOR(RAND() * 999999), 6, '0'));
        SELECT COUNT(*) INTO code_exists FROM orders WHERE order_code = new_code;
    END WHILE;
    
    IF attempts >= 100 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Unable to generate unique order code';
    END IF;
    
    RETURN new_code;
END//

DELIMITER ;

-- Triggers para auditoría
DELIMITER //

CREATE TRIGGER orders_audit_insert
AFTER INSERT ON orders
FOR EACH ROW
BEGIN
    INSERT INTO system_logs (action, description)
    VALUES ('order_created', CONCAT('New order created: ', NEW.order_code, ' for customer: ', NEW.customer_name));
END//

CREATE TRIGGER orders_audit_update
AFTER UPDATE ON orders
FOR EACH ROW
BEGIN
    IF OLD.status != NEW.status THEN
        INSERT INTO system_logs (action, description)
        VALUES ('order_status_changed', 
                CONCAT('Order ', NEW.order_code, ' status changed from ', OLD.status, ' to ', NEW.status));
    END IF;
END//

DELIMITER ;

-- Crear usuario para la aplicación (opcional, para mayor seguridad)
-- NOTA: Ajusta la contraseña según tus necesidades de seguridad
CREATE USER IF NOT EXISTS 'bunuelos_app'@'localhost' IDENTIFIED BY 'BunuelosApp2024!';
GRANT SELECT, INSERT, UPDATE, DELETE ON bunuelos_system.* TO 'bunuelos_app'@'localhost';
GRANT EXECUTE ON bunuelos_system.* TO 'bunuelos_app'@'localhost';
FLUSH PRIVILEGES;

-- Script de verificación (ejecutar después de la instalación)
SELECT 'Installation completed successfully!' as message;
SELECT COUNT(*) as admin_users_created FROM admin_users;
SELECT COUNT(*) as queue_types_created FROM queue_types;
SELECT COUNT(*) as menu_items_created FROM menu_items;

-- Mostrar configuración
SELECT config_key, config_value FROM system_config;